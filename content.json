{"meta":{"title":"Blog","subtitle":"Blog","description":"略懂设计的程序员","author":"佐伯楽","url":"https://saekiraku.github.io"},"pages":[{"title":"关于我","date":"2018-05-17T05:58:23.000Z","updated":"2018-05-17T05:59:52.883Z","comments":true,"path":"about/index.html","permalink":"https://saekiraku.github.io/about/index.html","excerpt":"","text":"I’m nobody"}],"posts":[{"title":"Webpack 前端编译策略的优化","slug":"Webpack编译策略与优化","date":"2018-05-17T06:01:55.000Z","updated":"2018-05-17T08:01:18.123Z","comments":true,"path":"2018/05/17/Webpack编译策略与优化/","link":"","permalink":"https://saekiraku.github.io/2018/05/17/Webpack编译策略与优化/","excerpt":"在前端工程化盛行的今天，很多公司为了提升开发效率与项目可维护性，都开始使用上了webpack这样的自动化工具。在享受自动化高效率的同时，也产生了一些性能上的问题：代码重复引用、臃肿的混合JS库、编译速度慢……，很多技术人员面对此类问题无从下手，求助于百度但是却不求甚解。所以本文将通过问题、分析、原因、解决方案几个步骤，来讲解前端自动化中的优化问题。","text":"在前端工程化盛行的今天，很多公司为了提升开发效率与项目可维护性，都开始使用上了webpack这样的自动化工具。在享受自动化高效率的同时，也产生了一些性能上的问题：代码重复引用、臃肿的混合JS库、编译速度慢……，很多技术人员面对此类问题无从下手，求助于百度但是却不求甚解。所以本文将通过问题、分析、原因、解决方案几个步骤，来讲解前端自动化中的优化问题。 问题1：编译后文件体积过大该问题是指执行编译后，webpack在控制台输出的数据中的资源体积过大。一般会用黄色的字体标注上[big]。有时编译策略的错误，会导致代码文件达到5、6MB甚至10MB以上。假设用户的网速是2MB/s，加载一次页面也需要3s，并且再考虑到服务器的出口带宽，可能就需要数十秒才能显示出页面。 但是，文件体积过大又分很多种情况，所以要具体情况具体分析。我们先从最简单的开始说。 CSS文件过大一般CSS文件不会过大，而且也没什么可优化的，毕竟CSS只是描述样式，没有逻辑，所以不会像JS出现重复引用的问题。只需要确保 LoaderOptionsPlugin 下开启了 minimize 。打包后的CSS就会自动去除不必要的换行符和空格等。 JS文件过大JS 文件过大的情况处理起来就比较复杂了，因为有很多可能性会导致JS文件过大。为了不盲目的解决问题，我们需要使用 webpack-bundle-analyzer 这个工具来分析具体是什么原因导致的问题。 原因：重复引用重复引用是一个非常常见的问题，虽然很多 webpack 脚手架都自带了 CommonsChunkPlugin 的配置 —— 将重复引用的JS模块打包进一个总的混合JS包中(常见命名：Common.js / Vendor.js / Lib.js……)，这样做的好处是降低页面加载时的并发量。参见：加载缓慢/HTTP并发 但是偶尔的，在某些特定情况下 CommonsChunkPlugin 反而会产生相反的作用。我们使用 webpack-bundle-analyzer 分析一下编译后的代码引用结构。 仔细观察上图，我们就会发现所有被按需加载的页面，都反复加载了 Ant.Design 组件库中使用到的组件。假如每个页面都用到了 Button 组件，那么当用户浏览网页中的其他内容时， Button 组件将会反复的被加载，白白浪费了网络带宽。 这个问题是因为项目按照 Ant.Design 官方文档的配置，增加了组件库的按需加载。因此使整个组件库独立出 CommonsChunkPlugin 的策略外了。 所以针对这个特殊情况，我们其实应该将 Ant.Design 从代码中抽离出来，然后使用 CDN 加载。虽然一次性的加载了一个非常大的类库，但是进入缓存后，后面的加载就会非常快了。同时，由于是后台系统，基本上一个页面中能用到的组件都用到了，使用按需加载会反复加载N次很多相同的组件代码。两者相比较起来，按需加载实际上就没有意义了。 原因：第三方类库问题2：加载缓慢 加载请求并发假设我们一个页面引用了 10 余个JS模块，当加载这些JS文件时，HTTP协议会进行3次握手4次挥手，相当于加载完整个页面，光HTTP就进行了70余次的通信。","categories":[{"name":"前端","slug":"前端","permalink":"https://saekiraku.github.io/categories/前端/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://saekiraku.github.io/tags/webpack/"}]}]}